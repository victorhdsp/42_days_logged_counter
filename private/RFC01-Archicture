# Guia de Estrutura e Fluxo da Aplica√ß√£o

Este documento serve como refer√™ncia para novos desenvolvedores entenderem **o prop√≥sito de cada camada e arquivo**, assim como **o fluxo de execu√ß√£o** t√≠pico na aplica√ß√£o.


---

## üìå Camadas e Responsabilidades

### 1. `cmd/main.go`

* **Ponto de entrada** da aplica√ß√£o.
* Deve inicializar:

  * Configura√ß√µes gerais (vari√°veis de ambiente, conex√µes de DB, etc.).
  * Inst√¢ncias de reposit√≥rios e EventBus.
  * Servi√ßos de aplica√ß√£o.
  * Roteador HTTP.
* Exemplo minimal:

  ```go
  func main() {
    cfg := config.Load()
    repo := infrastructure.NewMongoUserRepo(cfg.Mongo)
    eventBus := infrastructure.NewEventBus()
    userSvc := application.NewUserService(repo, eventBus)
    httpHandler := interfaces.NewUserHandler(userSvc)
    router := interfaces.NewRouter(httpHandler)
    http.ListenAndServe(cfg.Port, router)
  }
  ```

### 2. `internal/domain/shared`

Cont√©m c√≥digo compartilhado entre diferentes entidades, como eventos de dom√≠nio, identificadores, e fun√ß√µes utilit√°rias.	


### 3. `internal/domain/[entity]`

Cont√©m **l√≥gica de neg√≥cio pura** e **defini√ß√µes de contrato** sem depend√™ncias de infraestrutura referente aquela entidade.

* **`[entity].go`**

  * Struct definindo os atributos da entidade/agregado e entidades embutidas `User`, `CoinStatus`, `NFT`, etc.
  * Construtores (fun√ß√µes `NewUser`, `NewTokenStats`, `NewNFT`, etc.).
  * M√©todos embutidos que alteram estado (ex: `EarnCoins`, `TransferTokens`, `ReceiveTokens`).
  * Caso necess√°rio pode-se criar mais de um arquivo para separar entidades embutidas (ex: `user.go`, `coin_status.go`, `nft.go`).
  * **N√£o faz** leitura de DB, HTTP, ou outros detalhes de infra.

* **`commands.go`**

  * Define **a√ß√µes**/comandos que operam sobre entidades (por ex: `func (u *User) TransferTokens(...)`).
  * Deve ser de responsabilidade do comando validar os dados de entrada (ex: `amount > 0`, `from != to`, etc.).
  * Deve ser de responsabilidade do comando alterar o estado da entidade (ex: `u.Balance -= amount`, `u.NFTs = append(u.NFTs, nft)`).
  * **N√£o** deve fazer chamadas a reposit√≥rios ou servi√ßos externos.
  * Inclui l√≥gica de dom√≠nio e disparo de eventos de dom√≠nio.
  * Cada a√ß√£o deve ser um m√©todo de `User` ou outra entidade relevante.
  * Cada a√ß√£o deve retornar um evento de dom√≠nio (ex: `TokensTransferred`).

* **`events.go`**

  * Tipos de **DomainEvent** para cada a√ß√£o relevante (ex: `TokensTransferred`, `TokensReceived`).
  * Cada struct implementa `EventType()`.
  * Cada evento deve conter os dados relevantes para a a√ß√£o.

* **`errors.go`**

  * Defini√ß√µes de erros espec√≠ficos do dom√≠nio: `ErrInsufficientBalance`, etc.

* **`repository.go`**

  * Interface `Repository` com m√©todos de persist√™ncia: `FindByID`, `Save`, etc.
  * **N√£o** cont√©m implementa√ß√µes concretas.

### 4. `internal/application/shared`

Cont√©m c√≥digo compartilhado entre diferentes servi√ßos de aplica√ß√£o, como middlewares, helpers, etc.

* **`error_middleware.go`**

  * Middleware para capturar erros lan√ßados pelos **services** e transformar em respostas HTTP (c√≥digos, mensagens JSON).

### 4. `internal/application/[entity]/service/[service_name]`

Cont√©m **servi√ßos de aplica√ß√£o** que orquestram a l√≥gica de neg√≥cio e interagem com reposit√≥rios. Exemplo ao fazer transfer√™ncia de tokens eu preciso buscar o usu√°rio remetente e destinat√°rio  e ent√£o chamar os m√©todos de dom√≠nio para transferir os tokens e receber os tokens. A objetivo √© separar a l√≥gica de neg√≥cio pura (dom√≠nio) da l√≥gica de aplica√ß√£o (orquestra√ß√£o, valida√ß√£o, etc.).

### 6. `internal/interfaces/http ou web3/controller/[entity]`

* **`handler.go`**

  * HTTP Handlers: decodifica JSON do request, chama o service apropriado e retorna status + payload.

* **`dto.go`**

  * Structs de **Data Transfer Object** para requests e responses (ex: `TransferCoinsRequest`, `UserResponse`).

* **`router.go`**

  * Mapeia rotas para handlers (`POST /users/transfer` ‚Üí `userHandler.TransferCoins`).

### 7. `internal/infrastructure`

* **`db/*.go`**

  * Implementa√ß√£o dos reposit√≥rios da aplica√ß√£o, conex√µes com bancos de dados, etc.	

---

## üöÄ Exemplo Fluxo de uma Requisi√ß√£o de Transfer√™ncia

1. **Cliente** faz `POST /users/transfer` com payload `{ from_id, to_id, amount }`.
2. **Handler HTTP** (`interfaces/http/controller/user/handler.go`) decodifica o request para `TransferCoinsRequest` e chama `UserService.TransferCoins(ctx, fromID, toID, amount)`.
3. **Service de Aplica√ß√£o** (`internal/application/user/transfer_coins.go`):

   * Busca `sender` e `receiver` via `UserRepository`.
   * Invoca `sender.TransferTokens(to, amount)` (Domain).
   * Invoca `receiver.ReceiveTokens(amount)` (Domain).
   * Persiste ambos os usu√°rios via `repo.Save`.
   * Publica evento no `EventBus`.
4. **Domain** (`internal/domain/user`) executa l√≥gica de neg√≥cio e dispara `DomainEvent`.
5. **Handlers**  propagam o evento a subscribers (por ex: indexadores, integradores de blockchain, logs).
6. **HTTP Handler** retorna `204 No Content`.

---

> **Siga este padr√£o** para novos m√≥dulos: defina dom√≠nio puro, casos de uso em application, handlers em interfaces.
